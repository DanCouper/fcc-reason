// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function imperative_factorialise(n) {
  var fact = 1;
  for(var i = 1; i <= n; ++i){
    fact = Caml_int32.imul(fact, i);
  }
  return fact;
}

function recursive_factorialise(n) {
  if (n !== 0) {
    return Caml_int32.imul(n, recursive_factorialise(n - 1 | 0));
  } else {
    return 1;
  }
}

function tail_recursive_factorialise(n) {
  var _acc = 1;
  var _n = n;
  while(true) {
    var n$1 = _n;
    var acc = _acc;
    if (n$1 > 0) {
      _n = n$1 - 1 | 0;
      _acc = Caml_int32.imul(acc, n$1);
      continue ;
      
    } else {
      return acc;
    }
  };
}

exports.imperative_factorialise     = imperative_factorialise;
exports.recursive_factorialise      = recursive_factorialise;
exports.tail_recursive_factorialise = tail_recursive_factorialise;
/* No side effect */
