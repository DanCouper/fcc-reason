// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var $$String                = require("bs-platform/lib/js/string.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var Caml_string             = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function digits(d) {
  var _acc = /* [] */0;
  var _d = d;
  while(true) {
    var d$1 = _d;
    var acc = _acc;
    if (d$1 < 10) {
      return /* :: */[
              d$1,
              acc
            ];
    } else {
      _d = d$1 / 10 | 0;
      _acc = /* :: */[
        d$1 % 10,
        acc
      ];
      continue ;
      
    }
  };
}

function revDigits(d) {
  return List.rev(digits(d));
}

var numeralGroups = /* array */[
  /* array */[
    "",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "VI",
    "VII",
    "VIII",
    "IX"
  ],
  /* array */[
    "",
    "X",
    "XX",
    "XXX",
    "XL",
    "L",
    "LX",
    "LXX",
    "LXXX",
    "XC"
  ],
  /* array */[
    "",
    "C",
    "CC",
    "CCC",
    "CD",
    "D",
    "DC",
    "DCC",
    "DCCC",
    "CM"
  ],
  /* array */[
    "",
    "M",
    "MM",
    "MMM"
  ]
];

function convertTo(number) {
  return $$String.concat("", List.mapi(function (i, n) {
                  return Caml_array.caml_array_get(Caml_array.caml_array_get(numeralGroups, i), n);
                }, List.rev(digits(number))));
}

function explode(str) {
  var _a = str.length - 1 | 0;
  var _b = /* [] */0;
  while(true) {
    var b = _b;
    var a = _a;
    if (a < 0) {
      return b;
    } else {
      _b = /* :: */[
        Caml_string.get(str, a),
        b
      ];
      _a = a - 1 | 0;
      continue ;
      
    }
  };
}

function numeralValue($$char) {
  var exit = 0;
  var switcher = $$char - 67 | 0;
  if (switcher > 21 || switcher < 0) {
    exit = 1;
  } else {
    switch (switcher) {
      case 0 : 
          return 100;
      case 1 : 
          return 500;
      case 6 : 
          return 1;
      case 9 : 
          return 50;
      case 10 : 
          return 1000;
      case 19 : 
          return 5;
      case 2 : 
      case 3 : 
      case 4 : 
      case 5 : 
      case 7 : 
      case 8 : 
      case 11 : 
      case 12 : 
      case 13 : 
      case 14 : 
      case 15 : 
      case 16 : 
      case 17 : 
      case 18 : 
      case 20 : 
          exit = 1;
          break;
      case 21 : 
          return 10;
      
    }
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/danielcouper/Projects/Prototypes/fcc-reason/src/algorithms/algo22_roman_numerals.re",
            57,
            2
          ]
        ];
  }
  
}

function convertFrom(numerals) {
  var converter = function (numeralList) {
    if (numeralList) {
      var match = numeralList[1];
      var x = numeralList[0];
      if (match) {
        var rest = match[1];
        var y = match[0];
        var match$1 = numeralValue(x);
        var match$2 = numeralValue(y);
        if (match$1 < match$2) {
          return (match$2 - match$1 | 0) + converter(rest) | 0;
        } else if (match$1 === match$2) {
          return (match$1 + match$2 | 0) + converter(rest) | 0;
        } else {
          return match$1 + converter(/* :: */[
                      y,
                      rest
                    ]) | 0;
        }
      } else {
        return numeralValue(x);
      }
    } else {
      return 0;
    }
  };
  return converter(explode(numerals));
}

exports.digits        = digits;
exports.revDigits     = revDigits;
exports.numeralGroups = numeralGroups;
exports.convertTo     = convertTo;
exports.explode       = explode;
exports.numeralValue  = numeralValue;
exports.convertFrom   = convertFrom;
/* No side effect */
