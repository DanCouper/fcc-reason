// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function isPrime$prime(n, _counter) {
  while(true) {
    var counter = _counter;
    if (n < Caml_int32.imul(counter, counter)) {
      return /* true */1;
    } else if (Caml_int32.mod_(n, counter)) {
      _counter = counter + 2 | 0;
      continue ;
      
    } else {
      return /* false */0;
    }
  };
}

function isPrime(n) {
  var exit = 0;
  var switcher = n - 2 | 0;
  if (switcher > 3 || switcher < 0) {
    if (switcher !== 5) {
      exit = 1;
    } else {
      return /* true */1;
    }
  } else if (switcher !== 2) {
    return /* true */1;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (n < 2 || n % 2 === 0) {
      return /* false */0;
    } else {
      return isPrime$prime(n, 3);
    }
  }
  
}

function sumPrimes(n) {
  var _counter = 0;
  var _acc = 0;
  while(true) {
    var acc = _acc;
    var counter = _counter;
    if (counter > n) {
      return acc;
    } else {
      var match = isPrime(counter);
      _acc = match !== 0 ? acc + counter | 0 : acc;
      _counter = counter + 1 | 0;
      continue ;
      
    }
  };
}

exports.isPrime$prime = isPrime$prime;
exports.isPrime       = isPrime;
exports.sumPrimes     = sumPrimes;
/* No side effect */
