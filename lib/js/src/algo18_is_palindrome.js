// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

var $$String    = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function reverse(s) {
  var n = s.length;
  return $$String.init(n, function (i) {
              return Caml_string.get(s, (n - i | 0) - 1 | 0);
            });
}

function isValidAsciiChar(c) {
  if (c >= 48 && c <= 57) {
    return /* true */1;
  } else if (c >= 97) {
    return +(c <= 122);
  } else {
    return /* false */0;
  }
}

function isInvalidAsciiChar(c) {
  return 1 - isValidAsciiChar(c);
}

function isAsciiPalindrome(string) {
  var lcString = $$String.lowercase(string);
  var _param = /* tuple */[
    0,
    string.length - 1 | 0
  ];
  while(true) {
    var param = _param;
    var strEnd = param[1];
    var strStart = param[0];
    if (strStart >= strEnd) {
      return /* true */1;
    } else if (isValidAsciiChar(Caml_string.get(lcString, strStart))) {
      if (isValidAsciiChar(Caml_string.get(lcString, strEnd))) {
        if (Caml_string.get(lcString, strStart) !== Caml_string.get(lcString, strEnd)) {
          return /* false */0;
        } else {
          _param = /* tuple */[
            strStart + 1 | 0,
            strEnd - 1 | 0
          ];
          continue ;
          
        }
      } else {
        _param = /* tuple */[
          strStart,
          strEnd - 1 | 0
        ];
        continue ;
        
      }
    } else {
      _param = /* tuple */[
        strStart + 1 | 0,
        strEnd
      ];
      continue ;
      
    }
  };
}

exports.reverse            = reverse;
exports.isValidAsciiChar   = isValidAsciiChar;
exports.isInvalidAsciiChar = isInvalidAsciiChar;
exports.isAsciiPalindrome  = isAsciiPalindrome;
/* No side effect */
