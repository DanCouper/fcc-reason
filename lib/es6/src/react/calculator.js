// Generated by BUCKLESCRIPT VERSION 1.7.1, PLEASE EDIT WITH CARE
'use strict';

import * as List                    from "bs-platform/lib/es6/list.js";
import * as $$String                from "bs-platform/lib/es6/string.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function mapInputTypeToString(inputType) {
  if (typeof inputType === "number") {
    switch (inputType) {
      case 0 : 
          throw [
                Caml_builtin_exceptions.match_failure,
                [
                  "/Users/danielcouper/Projects/Prototypes/fcc-reason/src/react/calculator.re",
                  82,
                  2
                ]
              ];
      case 1 : 
          return "(";
      case 2 : 
          return ")";
      
    }
  } else {
    switch (inputType.tag | 0) {
      case 0 : 
          switch (inputType[0]) {
            case 0 : 
                return "0";
            case 1 : 
                return "1";
            case 2 : 
                return "2";
            case 3 : 
                return "3";
            case 4 : 
                return "4";
            case 5 : 
                return "5";
            case 6 : 
                return "6";
            case 7 : 
                return "7";
            case 8 : 
                return "8";
            case 9 : 
                return "9";
            case 10 : 
                return ".";
            
          }
          break;
      case 1 : 
          throw [
                Caml_builtin_exceptions.match_failure,
                [
                  "/Users/danielcouper/Projects/Prototypes/fcc-reason/src/react/calculator.re",
                  82,
                  2
                ]
              ];
      case 2 : 
          switch (inputType[0]) {
            case 0 : 
                return "^";
            case 1 : 
                return "\xc3\x97";
            case 2 : 
                return "\xc3\xb7";
            case 3 : 
                return "+";
            case 4 : 
                return "-";
            
          }
          break;
      
    }
  }
}

function updateInput(param) {
  var calculatorState = param[1];
  var numberBuilder = calculatorState[/* numberBuilder */2];
  var display = calculatorState[/* display */1];
  var tokenisedInputs = calculatorState[/* tokenisedInputs */0];
  var calculatorInput = param[0];
  var exit = 0;
  if (typeof calculatorInput === "number") {
    exit = 1;
  } else if (calculatorInput.tag) {
    exit = 1;
  } else {
    var digit = mapInputTypeToString(calculatorInput);
    if (calculatorInput[0] >= 10) {
      if (calculatorState[/* hasDecimalSeperator */3]) {
        return calculatorState;
      } else {
        return /* record */[
                /* tokenisedInputs */calculatorState[/* tokenisedInputs */0],
                /* display */display + digit,
                /* numberBuilder : :: */[
                  digit,
                  numberBuilder
                ],
                /* hasDecimalSeperator : true */1
              ];
      }
    } else {
      return /* record */[
              /* tokenisedInputs */calculatorState[/* tokenisedInputs */0],
              /* display */display + digit,
              /* numberBuilder : :: */[
                digit,
                numberBuilder
              ],
              /* hasDecimalSeperator */calculatorState[/* hasDecimalSeperator */3]
            ];
    }
  }
  if (exit === 1) {
    if (numberBuilder !== /* [] */0) {
      var num = List.fold_right(function (prev, curr) {
            return prev + curr;
          }, numberBuilder, "");
      return /* record */[
              /* tokenisedInputs : :: */[
                /* tuple */[
                  calculatorInput,
                  mapInputTypeToString(calculatorInput)
                ],
                /* :: */[
                  /* tuple */[
                    /* Number */0,
                    num
                  ],
                  tokenisedInputs
                ]
              ],
              /* display */$$String.concat(" ", /* :: */[
                    display,
                    /* :: */[
                      num,
                      /* :: */[
                        mapInputTypeToString(calculatorInput),
                        /* [] */0
                      ]
                    ]
                  ]),
              /* numberBuilder : [] */0,
              /* hasDecimalSeperator : false */0
            ];
    } else {
      return /* record */[
              /* tokenisedInputs : :: */[
                /* tuple */[
                  calculatorInput,
                  mapInputTypeToString(calculatorInput)
                ],
                tokenisedInputs
              ],
              /* display */$$String.concat(" ", /* :: */[
                    display,
                    /* :: */[
                      mapInputTypeToString(calculatorInput),
                      /* [] */0
                    ]
                  ]),
              /* numberBuilder */calculatorState[/* numberBuilder */2],
              /* hasDecimalSeperator */calculatorState[/* hasDecimalSeperator */3]
            ];
    }
  }
  
}

export {
  mapInputTypeToString ,
  updateInput          ,
  
}
/* No side effect */
